// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSNacelleCowl.h>
#include <string>
#include <TiglSymmetryAxis.h>
#include <tixi.h>
#include "CreateIfNotExists.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    // This class is used in:
    // CPACSEngine

    // generated from /xsd:schema/xsd:complexType[311]
    class CPACSEngineNacelle
    {
    public:
        TIGL_EXPORT CPACSEngineNacelle(CTiglUIDManager* uidMgr);
        TIGL_EXPORT virtual ~CPACSEngineNacelle();

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<TiglSymmetryAxis>& GetSymmetry() const;
        TIGL_EXPORT virtual void SetSymmetry(const boost::optional<TiglSymmetryAxis>& value);

        TIGL_EXPORT virtual const CCPACSNacelleCowl& GetFanCowl() const;
        TIGL_EXPORT virtual CCPACSNacelleCowl& GetFanCowl();

        TIGL_EXPORT virtual const boost::optional<CCPACSNacelleCowl>& GetCoreCowl() const;
        TIGL_EXPORT virtual boost::optional<CCPACSNacelleCowl>& GetCoreCowl();

        TIGL_EXPORT virtual CCPACSNacelleCowl& GetCoreCowl(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveCoreCowl();

    protected:
        CTiglUIDManager* m_uidMgr;

        std::string                        m_uID;
        boost::optional<TiglSymmetryAxis>  m_symmetry;
        CCPACSNacelleCowl                  m_fanCowl;
        boost::optional<CCPACSNacelleCowl> m_coreCowl;

    private:
#ifdef HAVE_CPP11
        CPACSEngineNacelle(const CPACSEngineNacelle&) = delete;
        CPACSEngineNacelle& operator=(const CPACSEngineNacelle&) = delete;

        CPACSEngineNacelle(CPACSEngineNacelle&&) = delete;
        CPACSEngineNacelle& operator=(CPACSEngineNacelle&&) = delete;
#else
        CPACSEngineNacelle(const CPACSEngineNacelle&);
        CPACSEngineNacelle& operator=(const CPACSEngineNacelle&);
#endif
    };
} // namespace generated

// Aliases in tigl namespace
#ifdef HAVE_CPP11
using CCPACSEngineNacelle = generated::CPACSEngineNacelle;
#else
typedef generated::CPACSEngineNacelle CCPACSEngineNacelle;
#endif
} // namespace tigl
