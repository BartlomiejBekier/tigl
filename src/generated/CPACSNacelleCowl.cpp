// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSNacelleCowl.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSNacelleCowl::CPACSNacelleCowl(CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_transformation(m_uidMgr)
        , m_sections(m_uidMgr)
    {
    }

    CPACSNacelleCowl::~CPACSNacelleCowl()
    {
    }

    CTiglUIDManager& CPACSNacelleCowl::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSNacelleCowl::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSNacelleCowl::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element transformation
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/transformation")) {
            m_transformation.ReadCPACS(tixiHandle, xpath + "/transformation");
        }
        else {
            LOG(ERROR) << "Required element transformation is missing at xpath " << xpath;
        }

        // read element sections
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/sections")) {
            m_sections.ReadCPACS(tixiHandle, xpath + "/sections");
        }
        else {
            LOG(ERROR) << "Required element sections is missing at xpath " << xpath;
        }

        // read element guideCurves
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/guideCurves")) {
            m_guideCurves.ReadCPACS(tixiHandle, xpath + "/guideCurves");
        }
        else {
            LOG(ERROR) << "Required element guideCurves is missing at xpath " << xpath;
        }

        // read element rotationCurve
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rotationCurve")) {
            m_rotationCurve.ReadCPACS(tixiHandle, xpath + "/rotationCurve");
        }
        else {
            LOG(ERROR) << "Required element rotationCurve is missing at xpath " << xpath;
        }

    }

    void CPACSNacelleCowl::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element transformation
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/transformation");
        m_transformation.WriteCPACS(tixiHandle, xpath + "/transformation");

        // write element sections
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sections");
        m_sections.WriteCPACS(tixiHandle, xpath + "/sections");

        // write element guideCurves
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/guideCurves");
        m_guideCurves.WriteCPACS(tixiHandle, xpath + "/guideCurves");

        // write element rotationCurve
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rotationCurve");
        m_rotationCurve.WriteCPACS(tixiHandle, xpath + "/rotationCurve");

    }

    const CCPACSTransformation& CPACSNacelleCowl::GetTransformation() const
    {
        return m_transformation;
    }

    CCPACSTransformation& CPACSNacelleCowl::GetTransformation()
    {
        return m_transformation;
    }

    const CPACSNacelleSections& CPACSNacelleCowl::GetSections() const
    {
        return m_sections;
    }

    CPACSNacelleSections& CPACSNacelleCowl::GetSections()
    {
        return m_sections;
    }

    const CPACSNacelleGuideCurves& CPACSNacelleCowl::GetGuideCurves() const
    {
        return m_guideCurves;
    }

    CPACSNacelleGuideCurves& CPACSNacelleCowl::GetGuideCurves()
    {
        return m_guideCurves;
    }

    const CPACSRotationCurve& CPACSNacelleCowl::GetRotationCurve() const
    {
        return m_rotationCurve;
    }

    CPACSRotationCurve& CPACSNacelleCowl::GetRotationCurve()
    {
        return m_rotationCurve;
    }

} // namespace generated
} // namespace tigl
