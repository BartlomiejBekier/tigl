// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <CCPACSNacelleGuideCurve.h>
#include "CPACSNacelleGuideCurves.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSNacelleGuideCurves::CPACSNacelleGuideCurves()
    {
    }

    CPACSNacelleGuideCurves::~CPACSNacelleGuideCurves()
    {
    }

    void CPACSNacelleGuideCurves::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element nacelleGuideCurveType
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/nacelleGuideCurveType")) {
            tixi::TixiReadElements(tixiHandle, xpath + "/nacelleGuideCurveType", m_nacelleGuideCurveTypes);
        }

    }

    void CPACSNacelleGuideCurves::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element nacelleGuideCurveType
        tixi::TixiSaveElements(tixiHandle, xpath + "/nacelleGuideCurveType", m_nacelleGuideCurveTypes);

    }

    const std::vector<unique_ptr<CCPACSNacelleGuideCurve> >& CPACSNacelleGuideCurves::GetNacelleGuideCurveTypes() const
    {
        return m_nacelleGuideCurveTypes;
    }

    std::vector<unique_ptr<CCPACSNacelleGuideCurve> >& CPACSNacelleGuideCurves::GetNacelleGuideCurveTypes()
    {
        return m_nacelleGuideCurveTypes;
    }

    CCPACSNacelleGuideCurve& CPACSNacelleGuideCurves::AddNacelleGuideCurveType()
    {
        m_nacelleGuideCurveTypes.push_back(make_unique<CCPACSNacelleGuideCurve>());
        return *m_nacelleGuideCurveTypes.back();
    }

    void CPACSNacelleGuideCurves::RemoveNacelleGuideCurveType(CCPACSNacelleGuideCurve& ref)
    {
        for (std::size_t i = 0; i < m_nacelleGuideCurveTypes.size(); i++) {
            if (m_nacelleGuideCurveTypes[i].get() == &ref) {
                m_nacelleGuideCurveTypes.erase(m_nacelleGuideCurveTypes.begin() + i);
                return;
            }
        }
        throw CTiglError("Element not found");
    }

} // namespace generated
} // namespace tigl
