// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSEngineNacelle.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSEngineNacelle::CPACSEngineNacelle(CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_fanCowl(this, m_uidMgr)
    {
    }

    CPACSEngineNacelle::~CPACSEngineNacelle()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    CTiglUIDManager& CPACSEngineNacelle::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSEngineNacelle::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSEngineNacelle::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element fanCowl
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/fanCowl")) {
            m_fanCowl.ReadCPACS(tixiHandle, xpath + "/fanCowl");
        }
        else {
            LOG(ERROR) << "Required element fanCowl is missing at xpath " << xpath;
        }

        // read element coreCowl
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/coreCowl")) {
            m_coreCowl = boost::in_place(this, m_uidMgr);
            try {
                m_coreCowl->ReadCPACS(tixiHandle, xpath + "/coreCowl");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read coreCowl at xpath " << xpath << ": " << e.what();
                m_coreCowl = boost::none;
            }
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSEngineNacelle::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element fanCowl
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fanCowl");
        m_fanCowl.WriteCPACS(tixiHandle, xpath + "/fanCowl");

        // write element coreCowl
        if (m_coreCowl) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/coreCowl");
            m_coreCowl->WriteCPACS(tixiHandle, xpath + "/coreCowl");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/coreCowl")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/coreCowl");
            }
        }

    }

    const std::string& CPACSEngineNacelle::GetUID() const
    {
        return m_uID;
    }

    void CPACSEngineNacelle::SetUID(const std::string& value)
    {
        if (m_uidMgr) {
            m_uidMgr->TryUnregisterObject(m_uID);
            m_uidMgr->RegisterObject(value, *this);
        }
        m_uID = value;
    }

    const CCPACSNacelleCowl& CPACSEngineNacelle::GetFanCowl() const
    {
        return m_fanCowl;
    }

    CCPACSNacelleCowl& CPACSEngineNacelle::GetFanCowl()
    {
        return m_fanCowl;
    }

    const boost::optional<CCPACSNacelleCowl>& CPACSEngineNacelle::GetCoreCowl() const
    {
        return m_coreCowl;
    }

    boost::optional<CCPACSNacelleCowl>& CPACSEngineNacelle::GetCoreCowl()
    {
        return m_coreCowl;
    }

    CCPACSNacelleCowl& CPACSEngineNacelle::GetCoreCowl(CreateIfNotExistsTag)
    {
        if (!m_coreCowl)
            m_coreCowl = boost::in_place(this, m_uidMgr);
        return *m_coreCowl;
    }

    void CPACSEngineNacelle::RemoveCoreCowl()
    {
        m_coreCowl = boost::none;
    }

} // namespace generated
} // namespace tigl
