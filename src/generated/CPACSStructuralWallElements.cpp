// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSStructuralWallElement.h"
#include "CPACSStructuralWallElements.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSStructuralWallElements::CPACSStructuralWallElements(CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
    }

    CPACSStructuralWallElements::~CPACSStructuralWallElements()
    {
    }

    CTiglUIDManager& CPACSStructuralWallElements::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSStructuralWallElements::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSStructuralWallElements::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element structuralWallElement
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/structuralWallElement")) {
            tixi::TixiReadElements(tixiHandle, xpath + "/structuralWallElement", m_structuralWallElements, 1, tixi::xsdUnbounded, m_uidMgr);
        }

    }

    void CPACSStructuralWallElements::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element structuralWallElement
        tixi::TixiSaveElements(tixiHandle, xpath + "/structuralWallElement", m_structuralWallElements);

    }

    const std::vector<std::unique_ptr<CPACSStructuralWallElement>>& CPACSStructuralWallElements::GetStructuralWallElements() const
    {
        return m_structuralWallElements;
    }

    std::vector<std::unique_ptr<CPACSStructuralWallElement>>& CPACSStructuralWallElements::GetStructuralWallElements()
    {
        return m_structuralWallElements;
    }

    CPACSStructuralWallElement& CPACSStructuralWallElements::AddStructuralWallElement()
    {
        m_structuralWallElements.push_back(make_unique<CPACSStructuralWallElement>(m_uidMgr));
        return *m_structuralWallElements.back();
    }

    void CPACSStructuralWallElements::RemoveStructuralWallElement(CPACSStructuralWallElement& ref)
    {
        for (std::size_t i = 0; i < m_structuralWallElements.size(); i++) {
            if (m_structuralWallElements[i].get() == &ref) {
                m_structuralWallElements.erase(m_structuralWallElements.begin() + i);
                return;
            }
        }
        throw CTiglError("Element not found");
    }

} // namespace generated
} // namespace tigl
